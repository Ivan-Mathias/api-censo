generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                Int                 @id @default(autoincrement())
  googleId          String?             @unique
  nome              String?
  sobrenome         String?
  email             String              @unique
  role              Role                @default(USER)
  AdministadorCenso AdministadorCenso[]
  DataResposta      DataResposta[]
  refreshToken      refreshToken[]
}

enum Role {
  USER
  ADMIN
}

model refreshToken {
  id          Int           @id @default(autoincrement())
  idUsuario   Int
  token       String
  expiracao   DateTime
  criadoEm    DateTime      @default(now())
  criadoPor   String
  idSucessor  Int?          @unique
  usuario     Usuario       @relation(fields: [idUsuario], references: [id])
  sucessor    refreshToken? @relation("TokenHistory", fields: [idSucessor], references: [id])
  predecessor refreshToken? @relation("TokenHistory")

  @@index([idUsuario])
}

model Censo {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?
  tcle              String?
  lastUpdated       DateTime            @updatedAt
  datePublished     DateTime?
  dateClosed        DateTime?
  questions         Pergunta[]
  DataResposta      DataResposta[]
  AdministadorCenso AdministadorCenso[]
}

model Pergunta {
  id        Int           @id @default(autoincrement())
  text      String
  idCenso   Int
  mandatory Boolean       @default(true)
  type      TipoPergunta  @default(UNICA)
  censo     Censo         @relation(fields: [idCenso], references: [id], onDelete: Cascade)
  options   Alternativa[]
}

model Alternativa {
  id         Int         @id @default(autoincrement())
  text       String
  questionId Int
  censo      Pergunta    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     Resultado[]
}

model Resultado {
  id           Int         @id @default(autoincrement())
  resposta     String?
  optionId     Int
  submissionId String
  censo        Alternativa @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model DataResposta {
  idUser  Int
  idCenso Int
  date    DateTime
  user    Usuario  @relation(fields: [idUser], references: [id])
  censo   Censo    @relation(fields: [idCenso], references: [id])

  @@id([idUser, idCenso])
}

model AdministadorCenso {
  idAdministrador Int
  idCenso         Int
  administrador   Usuario @relation(fields: [idAdministrador], references: [id])
  censo           Censo   @relation(fields: [idCenso], references: [id])

  @@id([idAdministrador, idCenso])
}

enum TipoPergunta {
  UNICA
  MULTIPLA
}
